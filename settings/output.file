"unmap <leader>ba
"unmap <leader>bundo
"unmap <leader>bw
"unmap <leader>bun
"unmap <leader>bb
"unmap <leader>bf
"unmap <leader>bd
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']

" Default to filename searches - so that appctrl will find application
" controller
"
" Changed back to path<leader> i think this is more useful
let g:ctrlp_by_filename = 0

" We don't want to use Ctrl-p as the mapping because
" it interferes with YankRing (paste<leader> then hit ctrl-p)
let g:ctrlp_map = '<leader>t'
nnoremap <silent> <leader>t :CtrlPMixed<CR>

" Additional mapping for buffer search
nnoremap <silent> <leader>b :CtrlPBuffer<cr>
nnoremap <silent> <leader>m :CtrlPMRU<cr>
nnoremap <silent> <C-b> :CtrlPBuffer<cr>

" Cmd-Shift-P to clear the cache
nnoremap <silent> <D-P> :ClearCtrlPCache<cr>

" Idea from : http://www.charlietanksley.net/blog/blog/2011/10/18/vim-navigation-with-lustyexplorer-and-lustyjuggler/
" Open CtrlP starting from a particular path<leader> making it much
" more likely to find the correct thing first. mnemonic 'jump to [something]'
map <leader>jm :CtrlP app/models<CR>
map <leader>jc :CtrlP app/controllers<CR>
map <leader>jv :CtrlP app/views<CR>
map <leader>jh :CtrlP app/helpers<CR>
map <leader>jl :CtrlP lib<CR>
map <leader>jp :CtrlP public<CR>
map <leader>js :CtrlP spec<CR>
map <leader>jf :CtrlP fast_spec<CR>
map <leader>jd :CtrlP db<CR>
map <leader>jC :CtrlP config<CR>
map <leader>jV :CtrlP vendor<CR>
map <leader>jF :CtrlP factories<CR>
map <leader>jT :CtrlP test<CR>
map <leader>jr :CtrlP spec/requests<CR>

"Cmd-Shift-(M)ethod - jump to a method (tag in current file)
"Ctrl-m is not good - it overrides behavior of Enter
nnoremap <silent> <D-M> :CtrlPBufTag<CR>

" MRU relative only to the current path
let g:ctrlp_mruf_relative = 1

map f <leader><leader>f
map ; <leader><leader>w
map <leader>; <leader><leader>b
map F <leader><leader>F

call EasyMotion#InitOptions({
\   'leader_key'      : '<Leader><Leader>'
\ , 'keys'            : 'fjdksewoavn'
\ , 'do_shade'        : 1
\ , 'do_mapping'      : 2
\ , 'grouping'        : 1
\ })
" fugitive.git
" ========================================
" For fugitive.git<leader> dp means :diffput. Define dg to mean :diffget
nnoremap <silent> <leader>dg :diffget<CR>
nnoremap <silent> <leader>dp :diffput<CR>

nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>
let g:gitgutter_highlight_lines = 0

":GitGutterEnable

"highlight link GitGutterAdd DiffAdd
"highlight link GitGutterChange DiffAdd
"highlight link GitGutterDelete DiffAdd
"highlight link GitGutterChangeDelete DiffAdd
highlight clear SignColumn
nmap <leader>u :GundoToggle<CR>

" open on the right so as not to compete with the nerdtree
let g:gundo_right = 1

" a little wider for wider screens
let g:gundo_width = 60
let g:neocomplete#enable_at_startup = 1
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
nnoremap <silent> <C-\> :NERDTreeFind<CR>:vertical res 30<CR>
noremap <Leader>n :NERDTreeToggle<CR>
let g:Powerline_symbols='fancy'
"let g:Powerline_theme='solarized'
"let g:Powerline_colorscheme='solarized'

set laststatus=2 "always show the statusline
" <leader>q to toggle quickfix window (where you have stuff like GitGrep)
" <leader>oq to open it back up (rare)
nmap <silent> <leader>qc :cclose<CR>
nmap <silent> <leader>qo :copen<CR>
" Better key maps for switching between controller and view
nnoremap <leader>vv :Rview<cr>
nnoremap <leader>cc :Rcontroller<cr>
"set conceallevel=2
"set concealcursor=vin
""let g:clang_snippets=1
""let g:clang_conceal_snippets=1
""let g:clang_snippets_engine='clang_complete'

"" Complete options (disable preview scratch window, longest removed to aways show menu)
"set completeopt=menu,menuone

"" Limit popup menu height
"set pumheight=20

"" SuperTab completion fall-back
"let g:SuperTabDefaultCompletionType='<c-x><c-u><c-p>'
"open the taglist (method browser) using ,T
let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
nnoremap <silent> <Leader>T :TagbarToggle<CR>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nmap <leader>ww :StripTrailingWhitespaces<CR>
